package storage

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"path/filepath"
	"io"
	"peerVault/encryption"
	"sync"
)

// Storage represents a simple file storage system.
type Storage struct {
	mu      sync.Mutex
	basePath string
}

// NewStorage creates a new Storage instance with the specified base path.
func NewStorage(basePath string) *Storage {
	if err := os.MkdirAll(basePath, 0755); err != nil {
		panic(fmt.Sprintf("Failed to create base path: %v", err))
	}
	return &Storage{basePath: basePath}
}

// SaveFile saves the given data to a file in the storage.
// The filename is generated by hashing the data.
func (s *Storage) SaveFile(conn net.Conn, reader *bufio.Reader, filetype string) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	outFile, err := os.CreateTemp(s.basePath, "file_*")
	if err != nil {
		return fmt.Errorf("failed to create temporary file: %w", err)
	}
	defer outFile.Close()
	

	if _,err := io.Copy(outFile, reader); err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}
	
	oldFilePath := outFile.Name()

	filehash, err := encryption.HashFile(oldFilePath)
	if err != nil {
		fmt.Println("Error hashing file:", err)
		return fmt.Errorf("failed to hash file: %w", err)
	}

	newFilePath := filepath.Join(s.basePath, filehash) + "." + filetype

	outFile.Close() // Close the file before renaming
	if err = os.Rename(oldFilePath, newFilePath); err!=nil{
		return fmt.Errorf("failed to rename file: %w", err)
	}

	fmt.Printf("File saved successfully to path: %s", newFilePath)
	return nil
}

// ReadFile reads the content of a file from the storage.
// The filename is expected to be the hashed name of the file.
func (s *Storage) ReadFile(filename string) ([]byte, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	filePath := filepath.Join(s.basePath, filename)
	filePath = filePath + ".txt"

	data, err := os.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read file: %w", err)
	}
	return data, nil
}
